name: Nightly Tests

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  nightly-backend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov flake8 black isort bandit safety
          
      - name: Run comprehensive backend tests
        run: |
          # Run all test suites
          python run_validation_tests.py
          python test_outfit_generation.py
          python comprehensive_testing_framework.py
          
          # Run with extended coverage
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
          
      - name: Security audit
        run: |
          bandit -r src/ -f json -o bandit-report.json
          safety check --json --output safety-report.json
          
      - name: Upload nightly backend results
        uses: actions/upload-artifact@v3
        with:
          name: nightly-backend-results
          path: |
            backend/coverage.xml
            backend/coverage.html
            backend/bandit-report.json
            backend/safety-report.json

  nightly-frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run comprehensive frontend tests
        run: |
          # Run all test suites
          npm test -- --coverage
          npm run lint
          npm audit --audit-level=moderate
          npm run build
          
      - name: Upload nightly frontend results
        uses: actions/upload-artifact@v3
        with:
          name: nightly-frontend-results
          path: |
            frontend/coverage
            frontend/.next

  nightly-e2e-tests:
    runs-on: ubuntu-latest
    needs: [nightly-backend-tests, nightly-frontend-tests]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Start backend server
        run: |
          cd backend
          python -m src.app &
          sleep 15
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          
      - name: Start frontend server
        run: |
          cd frontend
          npm run dev &
          sleep 20
          
      - name: Run comprehensive E2E tests
        run: |
          cd frontend
          # Run all E2E test files
          npx cypress run --spec "cypress/e2e/outfit-validation-e2e.cy.ts"
          npx cypress run --spec "cypress/e2e/outfit-validation-simple.cy.ts"
          npx cypress run --spec "cypress/e2e/outfit-generation.cy.ts"
          
      - name: Upload nightly E2E results
        uses: actions/upload-artifact@v3
        with:
          name: nightly-e2e-results
          path: |
            frontend/cypress/videos
            frontend/cypress/screenshots

  nightly-report:
    runs-on: ubuntu-latest
    needs: [nightly-backend-tests, nightly-frontend-tests, nightly-e2e-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all nightly results
        uses: actions/download-artifact@v3
        with:
          path: nightly-results
          
      - name: Generate nightly report
        run: |
          echo "## Nightly Test Report - $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Tests: ${{ needs.nightly-backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Tests: ${{ needs.nightly-frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.nightly-e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Coverage: Available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Coverage: Available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Bandit Security Scan: Available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Safety Dependency Check: Available in artifacts" >> $GITHUB_STEP_SUMMARY
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Nightly tests failed! Please check the logs for details."
          echo "Failed jobs:"
          echo "- Backend: ${{ needs.nightly-backend-tests.result }}"
          echo "- Frontend: ${{ needs.nightly-frontend-tests.result }}"
          echo "- E2E: ${{ needs.nightly-e2e-tests.result }}" 