name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov flake8 black isort bandit safety
          
      - name: Lint Python code
        run: |
          flake8 src/ --max-line-length=88 --extend-ignore=E203,W503
          black --check src/
          isort --check-only src/
          
      - name: Security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true
          
      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
          
      - name: Run validation tests
        run: |
          python run_validation_tests.py
          
      - name: Run outfit generation tests
        run: |
          python test_outfit_generation.py
          
      - name: Upload backend test results
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-results
          path: |
            backend/coverage.xml
            backend/coverage.html
            backend/bandit-report.json
            backend/safety-report.json
            
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Lint JS/TS code
        run: npm run lint
        
      - name: Audit dependencies
        run: npm audit --audit-level=moderate
        
      - name: Run unit tests
        run: npm test
        
      - name: Type checking
        run: npm run type-check || npx tsc --noEmit
        
      - name: Build application
        run: npm run build
        
      - name: Upload frontend test results
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-results
          path: |
            frontend/coverage
            frontend/.next

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Start backend server
        run: |
          cd backend
          python -m src.app &
          sleep 15
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          
      - name: Start frontend server
        run: |
          cd frontend
          npm run dev &
          sleep 20
          
      - name: Run E2E tests
        run: |
          cd frontend
          npx cypress run --spec "cypress/e2e/outfit-validation-simple.cy.ts"
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: |
            frontend/cypress/videos
            frontend/cypress/screenshots

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run integration tests
        run: |
          cd backend
          python comprehensive_testing_framework.py
          python test_frontend_api.py
          
      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: backend/comprehensive_test_results.json

  test-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, integration-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: test-results
          
      - name: Generate test summary
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Backend Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Validation Tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Type Checking: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### E2E Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Cypress Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Integration Tests" >> $GITHUB_STEP_SUMMARY
          echo "- API Integration: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## Test Summary')
            );
            
            const summary = `## Test Summary
            
            ### Backend Tests
            - Unit Tests: ${context.job === 'backend-tests' ? '✅' : '❌'}
            - Validation Tests: ${context.job === 'backend-tests' ? '✅' : '❌'}
            - Security Scan: ${context.job === 'backend-tests' ? '✅' : '❌'}
            
            ### Frontend Tests
            - Unit Tests: ${context.job === 'frontend-tests' ? '✅' : '❌'}
            - Type Checking: ${context.job === 'frontend-tests' ? '✅' : '❌'}
            - Build: ${context.job === 'frontend-tests' ? '✅' : '❌'}
            
            ### E2E Tests
            - Cypress Tests: ${context.job === 'e2e-tests' ? '✅' : '❌'}
            
            ### Integration Tests
            - API Integration: ${context.job === 'integration-tests' ? '✅' : '❌'}
            
            All tests completed successfully! 🎉`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary,
              });
            } 