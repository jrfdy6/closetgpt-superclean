"use client";

import { useState } from "react";
import Image from "next/image";
import { ClothingItem } from "@shared/types";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { 
  Heart, 
  Share2, 
  MoreHorizontal, 
  Image as ImageIcon,
  AlertCircle,
  RefreshCw 
} from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

interface WardrobeGridProps {
  items: ClothingItem[];
  loading?: boolean;
  error?: string | null;
  onItemClick?: (item: ClothingItem) => void;
  onGenerateOutfit?: (item: ClothingItem) => void;
  onDeleteItem?: (item: ClothingItem) => void;
  onEditItem?: (item: ClothingItem) => void;
  showActions?: boolean;
}

// Skeleton component for loading state
const WardrobeItemSkeleton = () => (
  <Card className="overflow-hidden min-h-[350px]">
    <div className="relative aspect-square min-h-[250px]">
      <Skeleton className="w-full h-full" />
    </div>
    <CardContent className="p-4">
      <Skeleton className="h-5 w-3/4 mb-3" />
      <Skeleton className="h-4 w-1/2 mb-2" />
      <Skeleton className="h-4 w-2/3" />
    </CardContent>
  </Card>
);

// Empty state component
const EmptyState = ({ message }: { message: string }) => (
  <div className="flex flex-col items-center justify-center py-12 px-4 text-center">
    <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4">
      <ImageIcon className="w-8 h-8 text-muted-foreground" />
    </div>
    <h3 className="text-lg font-semibold mb-2">No items found</h3>
    <p className="text-muted-foreground mb-4 max-w-sm">{message}</p>
    <Button variant="outline" size="sm">
      Add your first item
    </Button>
  </div>
);

// Error state component
const ErrorState = ({ error, onRetry }: { error: string; onRetry?: () => void }) => (
  <div className="flex flex-col items-center justify-center py-12 px-4 text-center">
    <div className="w-16 h-16 bg-destructive/10 rounded-full flex items-center justify-center mb-4">
      <AlertCircle className="w-8 h-8 text-destructive" />
    </div>
    <h3 className="text-lg font-semibold mb-2">Something went wrong</h3>
    <p className="text-muted-foreground mb-4 max-w-sm">{error}</p>
    {onRetry && (
      <Button onClick={onRetry} variant="outline" size="sm">
        <RefreshCw className="w-4 h-4 mr-2" />
        Try again
      </Button>
    )}
  </div>
);

export default function WardrobeGrid({
  items,
  loading = false,
  error = null,
  onItemClick,
  onGenerateOutfit,
  onDeleteItem,
  onEditItem,
  showActions = true
}: WardrobeGridProps) {
  const [imageErrors, setImageErrors] = useState<Record<string, boolean>>({});

  const handleImageError = (itemId: string) => {
    setImageErrors(prev => ({ ...prev, [itemId]: true }));
  };

  const handleImageLoad = (itemId: string) => {
    setImageErrors(prev => ({ ...prev, [itemId]: false }));
  };

  // Loading state
  if (loading) {
    return (
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 3xl:grid-cols-7 gap-4 sm:gap-6">
        {Array.from({ length: 12 }).map((_, index) => (
          <WardrobeItemSkeleton key={index} />
        ))}
      </div>
    );
  }

  // Error state
  if (error) {
    return <ErrorState error={error} />;
  }

  // Empty state
  if (!items || items.length === 0) {
    return (
      <EmptyState 
        message="Your wardrobe is empty. Start by adding some clothing items to see them here." 
      />
    );
  }

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 3xl:grid-cols-7 gap-4 sm:gap-6">
      {items.map((item) => (
        <Card 
          key={item.id} 
          className="group overflow-hidden hover:shadow-lg transition-all duration-200 cursor-pointer border-2 border-gray-200 hover:border-gray-300 min-h-[350px]"
          onClick={() => onItemClick?.(item)}
        >
          <div className="relative aspect-square min-h-[250px] bg-gray-50">
            {imageErrors[item.id] || !item.imageUrl || item.imageUrl === "" ? (
              // Fallback for failed images or missing imageUrl
              <div className="w-full h-full bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center">
                <div className="text-center p-4">
                  <ImageIcon className="w-12 h-12 text-gray-400 mx-auto mb-3" />
                  <p className="text-sm text-gray-500 font-medium">No Image</p>
                  <p className="text-xs text-gray-400 mt-1">{item.type || 'Clothing'}</p>
                </div>
              </div>
            ) : (
              <Image
                src={item.imageUrl}
                alt={item.name || "Clothing item"}
                fill
                className="object-cover transition-transform duration-200 group-hover:scale-105"
                onError={() => handleImageError(item.id)}
                onLoad={() => handleImageLoad(item.id)}
                sizes="(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 33vw, 25vw"
                unoptimized={item.imageUrl.includes('example.com')}
              />
            )}
            
            {/* Overlay with actions */}
            {showActions && (
              <div className="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors duration-200">
                <div className="absolute top-2 right-2">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button 
                        variant="secondary" 
                        size="sm" 
                        className="h-8 w-8 p-0 bg-gray-800/80 hover:bg-gray-800 text-white shadow-md"
                        onClick={(e) => e.stopPropagation()}
                      >
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end">
                      {onGenerateOutfit && (
                        <DropdownMenuItem onClick={(e) => {
                          e.stopPropagation();
                          onGenerateOutfit(item);
                        }}>
                          Generate outfit
                        </DropdownMenuItem>
                      )}
                      {onEditItem && (
                        <DropdownMenuItem onClick={(e) => {
                          e.stopPropagation();
                          onEditItem(item);
                        }}>
                          Edit item
                        </DropdownMenuItem>
                      )}
                      {onDeleteItem && (
                        <DropdownMenuItem 
                          onClick={(e) => {
                            e.stopPropagation();
                            onDeleteItem(item);
                          }}
                          className="text-destructive"
                        >
                          Delete item
                        </DropdownMenuItem>
                      )}
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
                
                {/* Quick action buttons */}
                <div className="absolute bottom-2 left-2">
                  <div className="flex gap-1">
                    <Button 
                      variant="secondary" 
                      size="sm" 
                      className="h-7 w-7 p-0 bg-gray-800/80 hover:bg-gray-800 text-white shadow-md"
                      onClick={(e) => e.stopPropagation()}
                      title="Favorite"
                    >
                      <Heart className="h-3 w-3" />
                    </Button>
                    <Button 
                      variant="secondary" 
                      size="sm" 
                      className="h-7 w-7 p-0 bg-gray-800/80 hover:bg-gray-800 text-white shadow-md"
                      onClick={(e) => e.stopPropagation()}
                      title="Share"
                    >
                      <Share2 className="h-3 w-3" />
                    </Button>
                  </div>
                </div>
              </div>
            )}
          </div>
          
          <CardContent className="p-4">
            <div className="space-y-3">
              <h3 className="font-medium text-base line-clamp-1">
                {item.name || "Untitled Item"}
              </h3>
              
              <div className="flex flex-wrap gap-1">
                {item.type && (
                  <Badge variant="secondary" className="text-xs">
                    {item.type}
                  </Badge>
                )}
                {item.color && (
                  <Badge variant="outline" className="text-xs">
                    {item.color}
                  </Badge>
                )}
              </div>
              
              {/* Tags */}
              {item.tags && item.tags.length > 0 && (
                <div className="flex flex-wrap gap-1">
                  {item.tags.slice(0, 2).map((tag, index) => (
                    <Badge key={index} variant="outline" className="text-xs">
                      {tag}
                    </Badge>
                  ))}
                  {item.tags.length > 2 && (
                    <Badge variant="outline" className="text-xs">
                      +{item.tags.length - 2}
                    </Badge>
                  )}
                </div>
              )}
              
              {/* Action buttons - always visible */}
              {showActions && (
                <div className="flex gap-2 pt-3 border-t border-gray-100">
                  {onGenerateOutfit && (
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="flex-1 text-xs h-8"
                      onClick={(e) => {
                        e.stopPropagation();
                        onGenerateOutfit(item);
                      }}
                    >
                      Generate Outfit
                    </Button>
                  )}
                  {onEditItem && (
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="flex-1 text-xs h-8"
                      onClick={(e) => {
                        e.stopPropagation();
                        onEditItem(item);
                      }}
                    >
                      Edit
                    </Button>
                  )}
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
} 