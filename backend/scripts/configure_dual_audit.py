#!/usr/bin/env python3
"""
Configuration helper for dual environment audit.
This script helps you set up the project IDs and service account paths.
"""

import os
import json
from pathlib import Path

def detect_current_project():
    """Detect the current Firebase project from service account key."""
    service_account_paths = [
        "service-account-key.json",
        "../service-account-key.json", 
        "frontend/serviceAccountKey.json"
    ]
    
    for path in service_account_paths:
        if os.path.exists(path):
            try:
                with open(path, 'r') as f:
                    data = json.load(f)
                    return data.get('project_id'), path
            except:
                continue
    
    return None, None

def configure_dual_audit():
    """Interactive configuration for dual environment audit."""
    print("üîß Dual Environment Audit Configuration")
    print("=" * 50)
    
    # Detect current project
    current_project, current_key_path = detect_current_project()
    
    if current_project:
        print(f"‚úÖ Detected current project: {current_project}")
        print(f"   Service account: {current_key_path}")
    else:
        print("‚ùå Could not detect current project from service account key")
        current_project = input("Enter current project ID: ").strip()
        current_key_path = input("Enter path to current service account key: ").strip()
    
    print("\nüìã Environment Configuration:")
    print("1. Is the current project your DEV or PROD environment?")
    print("   (d) DEV environment")
    print("   (p) PROD environment")
    
    current_env = input("Enter choice (d/p): ").strip().lower()
    
    if current_env == 'd':
        dev_project = current_project
        dev_key_path = current_key_path
        prod_project = input("Enter PROD project ID: ").strip()
        prod_key_path = input("Enter path to PROD service account key: ").strip()
    elif current_env == 'p':
        prod_project = current_project
        prod_key_path = current_key_path
        dev_project = input("Enter DEV project ID: ").strip()
        dev_key_path = input("Enter path to DEV service account key: ").strip()
    else:
        print("‚ùå Invalid choice. Please run again.")
        return
    
    # Validate service account paths
    if not os.path.exists(dev_key_path):
        print(f"‚ùå DEV service account key not found: {dev_key_path}")
        return
    
    if not os.path.exists(prod_key_path):
        print(f"‚ùå PROD service account key not found: {prod_key_path}")
        return
    
    # Generate configuration
    config = f'''# === CONFIGURATION ===
# Generated by configure_dual_audit.py
DEV_PROJECT_ID = "{dev_project}"
PROD_PROJECT_ID = "{prod_project}"
DEV_SERVICE_ACCOUNT_PATH = "{dev_key_path}"
PROD_SERVICE_ACCOUNT_PATH = "{prod_key_path}"

# Set to True to enable the audit
ENABLED = True
'''
    
    # Update the dual environment audit script
    audit_script_path = "scripts/dual_environment_audit.py"
    
    if os.path.exists(audit_script_path):
        with open(audit_script_path, 'r') as f:
            content = f.read()
        
        # Replace the configuration section
        lines = content.split('\n')
        new_lines = []
        in_config = False
        
        for line in lines:
            if line.startswith('# === CONFIGURATION ==='):
                in_config = True
                new_lines.append(config)
                continue
            elif in_config and line.startswith('ENABLED ='):
                in_config = False
                continue
            elif in_config:
                continue
            else:
                new_lines.append(line)
        
        with open(audit_script_path, 'w') as f:
            f.write('\n'.join(new_lines))
        
        print(f"\n‚úÖ Configuration updated in {audit_script_path}")
        print(f"\nüìä Environment Summary:")
        print(f"   DEV:  {dev_project}")
        print(f"   PROD: {prod_project}")
        print(f"\nüöÄ You can now run: python scripts/dual_environment_audit.py")
        
    else:
        print(f"\nüìù Configuration generated:")
        print(config)
        print(f"\n‚ö†Ô∏è  Please manually update {audit_script_path} with this configuration")

def test_current_connection():
    """Test the current Firebase connection."""
    print("\nüîç Testing Current Firebase Connection")
    print("=" * 40)
    
    try:
        import firebase_admin
        from firebase_admin import firestore, initialize_app
        
        if not firebase_admin._apps:
            initialize_app()
        
        db = firestore.client()
        
        # Test connection by getting collection count
        collections = ['wardrobe', 'outfits', 'users']
        for collection in collections:
            try:
                docs = list(db.collection(collection).limit(1).stream())
                print(f"‚úÖ {collection}: {len(docs)}+ documents")
            except Exception as e:
                print(f"‚ùå {collection}: {e}")
        
        print("\n‚úÖ Firebase connection successful!")
        
    except Exception as e:
        print(f"‚ùå Firebase connection failed: {e}")

if __name__ == "__main__":
    test_current_connection()
    configure_dual_audit() 